import tkinter as tk
from tkinter import filedialog as fd

class App(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.grid()
        self.master.title(title)
        self.save_file = None

        self.file_name_string = tk.StringVar()
        self.file_name_input = tk.Entry(self, textvariable=self.file_name_string, width=45, state="readonly")
        self.file_name_input.grid(row=0, column=0)

        self.open_file_button = tk.Button(self, text=open_file_button_text, command=self.file_dialog)
        self.open_file_button.grid(row=0, column=1)

        self.confirm_check = tk.BooleanVar()
        self.confirm_check.set(False)
        self.confirm_checkbox = tk.Checkbutton(self, text=confirm_text, indicatoron=True, variable=self.confirm_check, onvalue=True, offvalue=False, state="disabled", command=self.confirm_update)
        self.confirm_checkbox.grid(row=1, column=0, columnspan=2)

        self.save_button = tk.Button(self, text=file_update_button_text, command=self.update_file, state="disabled")
        self.save_button.grid(row=2, column=0, columnspan=2)

    def file_dialog(self):
        self.file_name_string.set(fd.askopenfilename(filetypes=(("Save File", "*.sav"), ("All Files", "*"))))

        if self.file_name_string.get() == "":
            self.confirm_checkbox.config(state="disabled")
            self.save_button.config(state="disabled")
            self.confirm_check.set(False)
            return
        try:
            self.save_file = open(self.file_name_string.get(), "rb").read()
            self.confirm_checkbox.config(state="normal")
            if not self.save_file.startswith(b'GVAS\x03\x00\x00\x00\n\x02\x00\x00\xf0\x03\x00\x00\x05\x00\x01\x00\x01\x00\xcd\xb6l\x01\x12\x00\x00\x00++UE5+Release-5.1\x00\x03\x00\x00\x00?\x00\x00\x00\xfb\x0c\x82\xa7YC\xa7 \x14,T\x8cP\xcf#\x96\x15\x00\x00\x00{G%\t\x01@=vs\xd6\x91\x9d\x11\xb4u\x0b\x01\x00\x00\x00\x1b!\x88B\xc6\x16HE\xb2gv\x1a\x00*zP\x01\x00\x00\x00\xed\n1\x11aMU.\xa3\x9ag\xaf,\x08\xa1\xc5\x11\x00\x00\x00x\xbb\xdf\xf6\xe4\xa0P\xbbM\xb8\x18@#\xaf\xcb`\x02\x00\x00\x00\xf3z\xbb$\x83OFV\xc2-/\x1f\xff\x96\xadI\x05\x00\x00\x00)#\xa5v\xb5E#\tA\xd8\xae\x98\xd8j/\xcf\x05\x00\x00\x00\x07i\xbc_\xae@\xc8U\x84\xf1g\x8e?\xf1\xff^\x01\x00\x00\x00\xfaz\xf5\xfc\x83BvPX\xe6\xa9\xb92-\xa0\xffL\x00\x00\x00N|\xe7\x82\xa5C#3\xc5\x13k\xb4\xf3\r1\x97\x00\x00\x00\x00"\xd5T\x9c\xbeO&\xa8F\x07!\x94\xd0\x82\xb4a,\x00\x00\x00\xe42\xd8\xb0\rO\x89\x1f\xb7~\xcf\xac\xa2J\xfd6\n\x00\x00\x00(C\xc6\xe1SM,\xa2\x86\x8el\xa3\x8c\xbd\x17d\x00\x00\x00\x00<\xc1^7\xfbH\xe4\x06\xf0\x84\x00\xb5~q*&\x04\x00\x00\x00\xedh\xb0\xe4\xe9B\x94\xf4\x0b\xda1\xa2A\xbbF.(\x00\x00\x00?t\xfc\xcf\x80D\xb0C\xdf\x14\x91\x93s \x1d\x17%\x00\x00\x00\xb5I+\xb0\xe9D \xbb\xb72\x04\xa3`\x03\xe4R\x03\x00\x00\x00\\\x10\xe4\xa4\xb5I\xa1Y\xc4@\xc5\xa7\xee\xdf~T\x00\x00\x00\x00\xc91\xc89\xdcG\xe6Z\x17\x9cD\x9a|\x8e\x1c>\x00\x00\x00\x003\x1b\xf0x\x98O\xea\xeb\xea\x84\xb4\xb9\xa2Z\xb9\xcc\x14\x00\x00\x00\x0f81f\xe0CM-\'\xcf\t\x80Z\xa9Vi\x00\x00\x00\x00\x9f\x8b\xf8\x12\xfcJu\x88\x0c\xd9|\xa6)\xbd:8-\x00\x00\x00L\xe7Z{\x10Lp\xd2\x98WX\xa9Z*!\x0b\r\x00\x00\x00\x18i)\xd7\xddK\xd6\x1d\xa8d\xe2\x9d\x848\xc1<\x03\x00\x00\x00xR\xa1\xc2\xfeJ\xe7\xbf\xff\x90\x17lU\xf7\x1dS\x01\x00\x00\x00\xd4\xa3\xacn\xc1L\xec@\xed\x8b\x86\xb7\xc5\x8fB\t\x03\x00\x00\x00\xddu\xe5)\'F\xa3\xe0v\xd2\x10\x9d\xea\xdc,#\x11\x00\x00\x00]\xa6C\xafGI\xd3\x7f\x8e>s\x98\x05\xbb\xc1\xd9\x0f\x00\x00\x00\xecl&k\x8fK\xc7\x1e\xd9\xe4\x0b\xa3\x07\xfcB\t\x01\x00\x00\x00a=\xf7\r\xeaG?\xa2\xe9\x89\'\xb7\x9aIA\x0c\x01\x00\x00\x00\x86\x18\x1d`\x84Od\xac\xde\xd3\x16\xaa\xd6\xc7\xea\rP\x00\x00\x00\xb7\x06L[\xf8Jc$p\xbf[\x80\xdd\xd0\xf5\xcd\n\x00\x00\x00hc\x08\xe7XL#kp\x1b9\x84\x91^&\x16\x04\x00\x00\x00\xd6\xbc\xff\x9dX\x01OI\x82\x12!\xe2\x88\xa8\x92<\n\x00\x00\x00\xac\xd0\xae\xf2oA\xfe\x9a\x7f\xaad\x86\xfc\xd6&\xfa\x01\x00\x00\x00\x0b\x1fO\x17\xa5E\xc6\xb4\xe8.?\xb1}\x91\xfb\xd0\n\x00\x00\x00\x83J\xf95l@X\xe2\xf5\t\x18\xa3|$\x10\x96)\x00\x00\x00n\xc1\x8f\xb6\xe2B\x1b\x8b\\!S\xb4\xfeD\x88\x05\x01\x00\x00\x00\x06\x85\xe1\xb2\xc2\xcfsB\xbb\xf4N\xa5\x07\xba\x8bu\x01\x00\x00\x006\x89\xf5d\xbaB\x1b\xfd\x89r\x96\xbaN\xfa\xd0\xd5\x01\x00\x00\x00\x81\xd5}i\xabAO\xe6\xecQJ\xaa(\xb6\xb7\xbeX\x00\x00\x00B^\x9b\xd8FM\xbd$\xa8\xac\x12\x84y\x17d\xdf)\x00\x00\x00R]\xdaYHI2\x12xYx\xb8\x8b\xe9\xb8p\x08\x00\x00\x002Z\x07&\x08G\x0fs2\x8c\xe9\x88\x05\x9dY\xf1\x00\x00\x00\x00\'\xd8\x0eo\x95H\t\xa6\x8d\x99\x91\x9c\xa4\x0e\x18\x90\x02\x00\x00\x00\xe3\x8b\xd50\x82B\xea\x95Y\xb1\xe3\xa6j\xb0\xeb\xd8\x01\x00\x00\x00\xe7\x9e\x7fq:I\xb0\xe92\x91\xb3\x88\x07\x818\x1b\x10\x00\x00\x00\x19M\x0cCpITqi\x9bi\x87\xe5\xb0\x90\xdf\x0f\x00\x00\x00\xbd2\xfe\xaa\x14L\x95S%^j\xb6\xdd\xd12\x10\x01\x00\x00\x00\x8e\xe1\xaf#XN\xe1LR\xc2a\x8d\xb7\xbeS\xb9\x0b\x00\x00\x00\xea\xb7b\xa4:N\x99\xf4\x1f\xec\xc1\x99\xb2\xe1$\x82\x04\x00\x00\x00\xbd\xfd\xb5.\x10M\xac\x01\x8f\xf36\x81\xda\xa5\x933\x05\x00\x00\x00O5\x9dP/I\xe6\xf6\xb2\x85I\xa7\x1cc<\x07\x00\x00\x00\x00\x1c\x1b\xe3\xb6\xec\x11\x9f\xd2\x85\x9f~\x85\xe2p\x99o\x01\x00\x00\x00@\xebVJ\xdc\x11\xf5\x10~4\xd3\x92\xe7j\xc9\xb2\x02\x00\x00\x00\x00J\x8a\xd7\x97FX\xe8\xb5\x19\xa8\xba\xb4F}H\x12\x00\x00\x00\x86\xf8yU\x1fL:\x93{\x08\xba\x83/\xb9ac\x02\x00\x00\x00R\xbe/a\x0b@S\xda\x91O\r\x91|\x85\xb1\x9f\x01\x00\x00\x006z#\xa4\xc9A\xea\xca\xf8\x18\xa2\x8f\xf3\x1bhX\x05\x00\x00\x00u?N\x80IK\x88p\x06\x8c\xd6\xa4\xdc\xb6~<\x05\x00\x00\x00\xf4H\xd0\x1ehL./\xa4S\xd0\x89-\x10\x8f\xf1\x01\x00\x00\x00\xf2\nh\xfb\xa3K\xefY\xb5\x19\xa8\xba=D\xc8s\x02\x00\x00\x00\x0e\xb7P\x99\x17N\x1a\xb4\r\xfa\xcc\xbb\xd6\x7f\x81W\x01\x00\x00\x004\x00\x00\x00/Game/Blueprints/GameData/MVMain_Save.MVMain_Save_C\x00'):
                self.save_file = None
                self.file_name_string.set("Invalid file")
                self.confirm_checkbox.config(state="disabled")
                self.save_button.config(state="disabled")
                self.confirm_check.set(False)
            return
        except:
            self.save_file = None
            self.file_name_string.set("Invalid file")
            self.confirm_checkbox.config(state="disabled")
            self.save_button.config(state="disabled")
            self.confirm_check.set(False)
            return

    def confirm_update(self):
        if self.confirm_check.get():
            self.save_button.config(state="normal")
        else:
            self.save_button.config(state="disabled")

    def update_file(self):
        save_new = {}
        try:
            save_zone_start_index = self.save_file.find(b'\x15\x00\x00\x00lastSavedZoneSpawnIn\x00\x0c\x00\x00\x00StrProperty\x00')
            save_zone_end_index = self.save_file.find(b'\x00', save_zone_start_index + 54)
            save_point_start_index = self.save_file.find(b'\x12\x00\x00\x00lastSavePointName\x00\x0c\x00\x00\x00StrProperty\x00')
            save_point_end_index = self.save_file.find(b'\x00', save_point_start_index + 51)
            save_tag_start_index = self.save_file.find(b'spawnPointTag\x00\x0c\x00\x00\x00StrProperty\x00')-4
            save_tag_end_index = self.save_file.find(b'\x00', save_tag_start_index + 47)
            if save_zone_start_index < 100 and save_point_start_index < 100:
                raise Exception
            if save_zone_start_index < 100:
                save_new = self.save_file[:save_point_start_index] + b'\x12\x00\x00\x00lastSavePointName\x00\x0c\x00\x00\x00StrProperty\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00BP_SavePoint_C_2' + self.save_file[save_point_end_index:save_tag_start_index]
            elif save_point_start_index < 100:
                save_new = self.save_file[:save_zone_start_index] + b'\x12\x00\x00\x00lastSavePointName\x00\x0c\x00\x00\x00StrProperty\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00BP_SavePoint_C_2' + self.save_file[save_zone_end_index:save_tag_start_index]
            elif save_zone_start_index > save_point_start_index:
                save_new = self.save_file[:save_point_start_index] + b'\x12\x00\x00\x00lastSavePointName\x00\x0c\x00\x00\x00StrProperty\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00BP_SavePoint_C_2' + self.save_file[save_zone_end_index:save_tag_start_index]
            elif save_zone_start_index < save_point_start_index:
                save_new = self.save_file[:save_zone_start_index] + b'\x12\x00\x00\x00lastSavePointName\x00\x0c\x00\x00\x00StrProperty\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00BP_SavePoint_C_2' + self.save_file[save_point_end_index:save_tag_start_index]
            else:
                self.file_name_string.set("Invalid file")
                return
            save_new += b'\x0e\x00\x00\x00spawnPointTag\x00\x0c\x00\x00\x00StrProperty\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00dungeonlowestSave' + self.save_file[save_tag_end_index:]
        except:
            self.file_name_string.set("Invalid file")
            return
        try:
            open(self.file_name_string.get(), "wb").write(save_new)
            self.file_name_string.set("Success!")
            self.save_file = None
            self.confirm_checkbox.config(state="disabled")
            self.save_button.config(state="disabled")
            self.confirm_check.set(False)
        except:
            self.file_name_string.set("Error")
            return



title = "Pseudoregalia Unstucker"
open_file_button_text = "Open SaveFile..."
confirm_text = "I have made a backup copy of my save file and I am ready to proceed."
file_update_button_text = "Unstuck!"
window = App()
window.mainloop()
